// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SilverBotDS.Objects;

#nullable disable

namespace SilverBotDS.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220130124005_RR")]
    partial class RR
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.PlannedEvent", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ChannelID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageID")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ResponseMessageID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventID");

                    b.ToTable("plannedEvents");
                });

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.ReactionRole.ReactionRoleMapping", b =>
                {
                    b.Property<Guid>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("EmojiId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MappingId");

                    b.ToTable("ReactionRoleMappings");
                });

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.TranslatorSettings", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTranslator")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("translatorSettings");
                });

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.UserExperience", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("XPString")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("userExperiences");
                });

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.UserQuote", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuoteContent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuoteId");

                    b.ToTable("userQuotes");
                });

            modelBuilder.Entity("SilverBotDS.Objects.ServerSettings", b =>
                {
                    b.Property<ulong>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmotesOptin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LangName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrefixesInJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RepeatThings")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ServerStatsCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerStatsTemplatesInJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WebShot")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.ToTable("serverSettings");
                });

            modelBuilder.Entity("SilverBotDS.Objects.UserSettings", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LangName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsesNewMusicPage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("userSettings");
                });

            modelBuilder.Entity("SilverBotDS.Objects.Database.Classes.TranslatorSettings", b =>
                {
                    b.OwnsOne("SilverBotDS.Objects.Language", "CurrentCustomLanguage", b1 =>
                        {
                            b1.Property<ulong>("TranslatorSettingsId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AccountCreationDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AccountJoinDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AddedXAmountOfSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AllAvailibleEmotes")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyOptedIn")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyVoted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AmericanMoney")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Ban")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotBannedUser")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotHasLowerRole")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotKickedUser")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CLR")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CanForceSkip")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CategorySetSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ChecksFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ComicSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CommandIsDisabled")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CostsMoneyGameTypeBug")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CultureInfo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DblaReturnedNull")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DisabledRepeatedPhrases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Downloads")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DsharpplusVersion")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiEnd")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiMessageDownloadEnd")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiMessageDownloadStart")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmoteWasLargerThan256K")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EnableRepeatedPhrases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Enqueued")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FreeToPlayGameType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GeneralException")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitBranch")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitCommitHash")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitRepo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupAliases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupArguments")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupCanBeExecuted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupListingAllCommands")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupSubcommands")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandHelpString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandNoDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hi")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("InformationAbout")
                                .HasColumnType("TEXT");

                            b1.Property<string>("InvalidOverload")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsABot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsAnOwner")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsDirty")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Joined")
                                .HasColumnType("TEXT");

                            b1.Property<string>("JoinedSilverCraft")
                                .HasColumnType("TEXT");

                            b1.Property<string>("JpegSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Kick")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LangCodeGoogleTranslate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LangName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Left")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoadedSilverBotPlaylistWithTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoopingQueue")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoopingSong")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MathSteps")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Meme")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MoreThanOneImageGeneric")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MultipleEmotesFound")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoEmotesFound")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoGamesWereReturned")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoGamesWereReturnedDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoImageGeneric")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoMatchingSubcommandsAndGroupNotExecutable")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoPerm")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoResults")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotAvailableGameType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotLooping")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotPaused")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotPlaying")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotValidLanguage")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NothingInQueue")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NothingInQueueHistory")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NowPlaying")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NuGetVerified")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OS")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedIn")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedInWebshot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedOutWebshot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OutputFileLargerThan8M")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageGif")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageGifButtonText")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageNuget")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PeriodExpired")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PoweredByGiphy")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrefixUsedTopgg")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeNothingToDelete")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeNumberNegative")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedFront")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedPlural")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedSingle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgedBySilverBotReason")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuoteGetNoBook")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuoteGetNoQuoteWithId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuotePreviewDeleteSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuotePreviewQuoteID")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RandomGif")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedFront")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedSong")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedXSongOrSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequestedBy")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotAndUserPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotAndUserPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireDJCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireGuildCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireNsfwCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireOwnerCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireRolesCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireRolesCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireUserPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireUserPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ResizeSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Results")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFail")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFailDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFailTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchedFor")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Server")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SetToDefaultStrings")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SetToProvidedStrings")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ShuffledSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverhostingJokeDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverhostingJokeTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SkippedNP")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SomethingsContributors")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongByAuthor")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongLength")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongNotExist")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeft")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeftSongLooping")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeftSongLoopingCurrent")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimePosition")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Success")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeInUtc")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeTillTrackPlays")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeWhenTrackPlayed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TintSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackCanNotBeSeeked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackingStarted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackingStopped")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UnknownImageFormat")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UrbanExample")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UselessFact")
                                .HasColumnType("TEXT");

                            b1.Property<string>("User")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserHasLowerRole")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserIsBannedFromSilversocial")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserIsntBot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserNotConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Userid")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VersionInfoTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VersionNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VolumeNotCorrect")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Voted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("WrongImageCount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandCardSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandFailOther")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandFailSelf")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandGeneralFail")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandLeaderBoardPerson")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandLeaderBoardTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandOther")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandSelf")
                                .HasColumnType("TEXT");

                            b1.HasKey("TranslatorSettingsId");

                            b1.ToTable("translatorSettings");

                            b1.WithOwner()
                                .HasForeignKey("TranslatorSettingsId");
                        });

                    b.OwnsMany("SilverBotDS.Objects.Language", "CustomLanguages", b1 =>
                        {
                            b1.Property<ulong>("TranslatorSettingsId")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<string>("AccountCreationDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AccountJoinDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AddedXAmountOfSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AllAvailibleEmotes")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyOptedIn")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AlreadyVoted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AmericanMoney")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Ban")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotBannedUser")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotHasLowerRole")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BotKickedUser")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CLR")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CanForceSkip")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CategorySetSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ChecksFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ComicSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CommandIsDisabled")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CostsMoneyGameTypeBug")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CultureInfo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DblaReturnedNull")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DisabledRepeatedPhrases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Downloads")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DsharpplusVersion")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiEnd")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiMessageDownloadEnd")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmojiMessageDownloadStart")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmoteWasLargerThan256K")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EnableRepeatedPhrases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Enqueued")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FreeToPlayGameType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GeneralException")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitBranch")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitCommitHash")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GitRepo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupAliases")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupArguments")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupCanBeExecuted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupListingAllCommands")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandGroupSubcommands")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandHelpString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HelpCommandNoDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hi")
                                .HasColumnType("TEXT");

                            b1.Property<string>("InformationAbout")
                                .HasColumnType("TEXT");

                            b1.Property<string>("InvalidOverload")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsABot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsAnOwner")
                                .HasColumnType("TEXT");

                            b1.Property<string>("IsDirty")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Joined")
                                .HasColumnType("TEXT");

                            b1.Property<string>("JoinedSilverCraft")
                                .HasColumnType("TEXT");

                            b1.Property<string>("JpegSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Kick")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LangCodeGoogleTranslate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LangName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Left")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoadedSilverBotPlaylistWithTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoopingQueue")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LoopingSong")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MathSteps")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Meme")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MoreThanOneImageGeneric")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MultipleEmotesFound")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoEmotesFound")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoGamesWereReturned")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoGamesWereReturnedDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoImageGeneric")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoMatchingSubcommandsAndGroupNotExecutable")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoPerm")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NoResults")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotAvailableGameType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotLooping")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotPaused")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotPlaying")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NotValidLanguage")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NothingInQueue")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NothingInQueueHistory")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NowPlaying")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NuGetVerified")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OS")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedIn")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedInWebshot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OptedOutWebshot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OutputFileLargerThan8M")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageGif")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageGifButtonText")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PageNuget")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PeriodExpired")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PoweredByGiphy")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrefixUsedTopgg")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeNothingToDelete")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeNumberNegative")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedFront")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedPlural")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgeRemovedSingle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PurgedBySilverBotReason")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuoteGetNoBook")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuoteGetNoQuoteWithId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuotePreviewDeleteSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QuotePreviewQuoteID")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RandomGif")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedFront")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedSong")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RemovedXSongOrSongs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequestedBy")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotAndUserPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotAndUserPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireBotPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireDJCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireGuildCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireNsfwCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireOwnerCheckFailed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireRolesCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireRolesCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireUserPermisionsCheckFailedPL")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RequireUserPermisionsCheckFailedSG")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ResizeSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Results")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFail")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFailDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchFailTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SearchedFor")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Server")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SetToDefaultStrings")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SetToProvidedStrings")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ShuffledSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverhostingJokeDescription")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SilverhostingJokeTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SkippedNP")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SomethingsContributors")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongByAuthor")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongLength")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongNotExist")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeft")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeftSongLooping")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimeLeftSongLoopingCurrent")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SongTimePosition")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Success")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeInUtc")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeTillTrackPlays")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TimeWhenTrackPlayed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TintSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackCanNotBeSeeked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackingStarted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("TrackingStopped")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UnknownImageFormat")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UrbanExample")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UselessFact")
                                .HasColumnType("TEXT");

                            b1.Property<string>("User")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserHasLowerRole")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserIsBannedFromSilversocial")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserIsntBot")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserNotConnected")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Userid")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VersionInfoTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VersionNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VolumeNotCorrect")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Voted")
                                .HasColumnType("TEXT");

                            b1.Property<string>("WrongImageCount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandCardSuccess")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandFailOther")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandFailSelf")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandGeneralFail")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandLeaderBoardPerson")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandLeaderBoardTitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandOther")
                                .HasColumnType("TEXT");

                            b1.Property<string>("XPCommandSelf")
                                .HasColumnType("TEXT");

                            b1.HasKey("TranslatorSettingsId", "Id");

                            b1.ToTable("translatorSettings_CustomLanguages");

                            b1.WithOwner()
                                .HasForeignKey("TranslatorSettingsId");
                        });

                    b.Navigation("CurrentCustomLanguage");

                    b.Navigation("CustomLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
