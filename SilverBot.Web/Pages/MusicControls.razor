@page "/musiccontrols"
@using DSharpPlus
@using DSharpPlus.Entities
@using Lavalink4NET
@using Lavalink4NET.Player
@using SilverBot.Shared.Objects
@using SilverBot.Shared.Objects.Classes
@using SilverBot.Shared.Objects.Database
@using SilverBot.Shared.Objects.Language
@using SilverBot.Web.WebHelpers
@attribute [Authorize]

@inject NavigationManager UriHelper
@inject Config Config
@inject AuthenticationStateProvider AuthenticationStateProvider

@{
    if (!Config.UseLavaLink)
    {
        UriHelper.NavigateTo("/", true);
    }

}

<RadzenNotification/>
@inject DiscordClient Discord
@inject LavalinkNode Lavalink
@inject DatabaseContext DbCtx
@inject NotificationService NotificationService
@inject LanguageService LanguageService
@{
    var usenew = false;
    var auser = AuthenticationStateProvider.AuthState();
    var user = Discord.GetUserAsync(auser.User.PUID()).GetAwaiter().GetResult();
    var userpref = DbCtx.userSettings.FirstOrDefault(x => x.Id == user.Id);
    if (userpref != null)
    {
        usenew = userpref.UsesNewMusicPage;
    }
    var lang = LanguageService.FromUserId(user.Id, DbCtx);
}
@foreach (var guild in Discord.Guilds.Values.Where(x => x.Members.ContainsKey(user.Id) && x.Members[user.Id].VoiceState is not null 
                                                        && x.Members[user.Id].VoiceState.Channel is not null && Lavalink.HasPlayer(x.Id)
                                                        && Lavalink.GetPlayer<BetterVoteLavalinkPlayer>(x.Id).VoiceChannelId == x.Members[user.Id].VoiceState.Channel.Id))
{
    bool CheckForDj()
    {
        return guild.Members[user.Id].Roles.Any(e => e.CheckPermission(Permissions.ManageChannels) == PermissionLevel.Allowed || e.Name.ToLower().Contains("dj")) || guild.Members[user.Id].VoiceState.Channel.Users.LongCount(x => !x.IsBot) == 1;
    }

    async Task ToggleStatePress(BetterVoteLavalinkPlayer player)
    {
        switch (player.State)
        {
            case PlayerState.Paused:
                await player.ResumeAsync();
                player.TriggerWebsiteEvent(user, "RESUME");
                break;
            case PlayerState.Playing:
                await player.PauseAsync();
                player.TriggerWebsiteEvent(user, "PAUSE");
                break;
        }
    }

    async Task VoteSkipPress(BetterVoteLavalinkPlayer player)
    {
        var voteStatus = await player.VoteAsync(user.Id);
        if (voteStatus.WasSkipped)
        {
            player.TriggerWebsiteEvent(user, "SKIPEDVIAVOTE");
        }
        else if (voteStatus.WasAdded)
        {
            player.TriggerWebsiteEvent(user, "VOTEDFORSKIP");
        }
    }

    async Task ForceSkipPress(BetterVoteLavalinkPlayer player)
    {
        if (CheckForDj())
        {
            await player.SkipAsync();
            player.TriggerWebsiteEvent(user, "SKIPPED");
        }
    }

    void ShufflePress(BetterVoteLavalinkPlayer player)
    {
        if (!CheckForDj())
        {
            return;
        }
        player.Queue.Shuffle();
        player.TriggerWebsiteEvent(user, "SHUFFLE");
    }

    void NotLoopingPress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.NotLooping;
        player.TriggerWebsiteEvent(user, "LOOPOFF");
    }

    void LoopingSongPress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.LoopingSong;
        player.TriggerWebsiteEvent(user, "LOOPSONG");
    }

    void LoopingQueuePress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.LoopingQueue;
        player.TriggerWebsiteEvent(user, "LOOPQUEUE");
    }

    void ShowNotification(DiscordUser discordUser, string action)
    {
        action = action switch
        {
            "RESUME" => lang.WebsitePlayerResumed,
            "PAUSE" => lang.WebsitePlayerPaused,
            "SKIPEDVIAVOTE" =>lang.WebsiteSkippedViaVote,
            "VOTEDFORSKIP" => lang.WebsiteVotedForSkip,
            "SKIPPED"=> lang.WebsiteSkipped,
            "SHUFFLE"=> lang.WebsiteShuffled,
            "LOOPOFF" => lang.WebsiteLoopOff,
            "LOOPSONG" => lang.WebsiteLoopSong,
            "LOOPQUEUE" =>lang.WebsiteLoopQueue,
            _ => action
        };
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = discordUser.Username, Detail = action, Duration = 4000 });
        InvokeAsync(StateHasChanged);
    }

    async Task VolumeUpPress(LavalinkPlayer player)
    {
        if (player.Volume + 0.1f <= 1)
        {
            await player.SetVolumeAsync(player.Volume + 0.1f);
        }
    }

    async Task VolumeDownPress(LavalinkPlayer player)
    {
        if (player.Volume - 0.1f >= 0)
        {
            await player.SetVolumeAsync(player.Volume - 0.1f);
        }
    }

    var toggleStateText = "report_problem";
    var player = Lavalink.GetPlayer<BetterVoteLavalinkPlayer>(guild.Id);
    player?.RemoveOnWebsiteEventHandelers(user);
    if (player?.OnWebsiteEvent.ContainsKey(user) == true)
    {
        player.OnWebsiteEvent[user].Add((s, u) =>
        {
            ShowNotification(u, s);
            return true;
        });
    }
    else
    {
        if (player != null)
        {
            player.OnWebsiteEvent.Add(user, new List<Func<string, DiscordUser, bool>>());
            player.OnWebsiteEvent[user].Add((s, u) =>
            {
                ShowNotification(u, s);
                return true;
            });
        }
    }
    toggleStateText = player?.State switch
    {
        PlayerState.Paused => "play_arrow",
        PlayerState.Playing => "pause",
        _ => toggleStateText
    };
    if (usenew)
    {
        <div id="audio-player-container">
            <p id="maintext"><RadzenIcon Icon="volume_up" style="top: 50%;transform: translateY(30%);"/>@guild.Members[user.Id].VoiceState.Channel.Name in @guild.Name</p>
            <p>
                Currently playing:
                <a target="_blank" href="@(player.CurrentTrack is null ? "https://www.youtube.com/watch?v=dQw4w9WgXcQ" : player.CurrentTrack.Uri)">
                    <strong>@(player.CurrentTrack is null ? lang.WebsitePlayingNothingTrackName : player.CurrentTrack.Title)</strong>
                </a>
            </p>
            <button type="submit" name="ToggleState" title="@lang.WebsitePlayPause" id="ToggleState" @onclick="@(async e => { await ToggleStatePress(player); if (player.State is PlayerState.Paused) { toggleStateText = "play_arrow"; } else if (player.State is PlayerState.Playing) { toggleStateText = "pause";} })" runat="server">
                <RadzenIcon Icon="@toggleStateText"/>
            </button>
            <button type="submit" name="VoteSkip" title="@lang.WebsiteVoteSkip" id="VoteSkip" @onclick="@(async e => await VoteSkipPress(player))" runat="server">
                <RadzenIcon Icon="how_to_vote"/>
            </button>
            @if (CheckForDj())
            {
                <button type="submit" name="ForceSkip" title="@lang.WebsiteForceSkip" id="ForceSkip" @onclick="@(async e => await ForceSkipPress(player))" runat="server">
                    <RadzenIcon Icon="skip_next"/>
                </button>
            }
            @if (CheckForDj())
            {
                <button type="submit" name="Shuffle" title="@lang.WebsiteShuffle" id="Shuffle" @onclick="@(e => ShufflePress(player))" runat="server">
                    <RadzenIcon Icon="shuffle"/>
                </button>
            }
            <button type="submit" name="NoLoop" title="@lang.WebsiteNoLoop" id="NoLoop" @onclick="@(e => NotLoopingPress(player))" runat="server">
                <RadzenIcon Icon="repeat"/>
            </button>
            <button type="submit" name="LoopSong" title="@lang.WebsiteBLoopSong" id="LoopSong" @onclick="@(e => LoopingSongPress(player))" runat="server">
                <RadzenIcon Icon="repeat_one"/>
            </button>
            <button type="submit" name="LoopQueue" title="@lang.WebsiteBLoopQueue" id="LoopQueue" @onclick="@(e => LoopingQueuePress(player))" runat="server">
                <RadzenIcon Icon="repeat_on"/>
            </button>
            <button type="submit" name="VolumeDown" title="@lang.WebsiteBVolumeDown" id="VolumeDown" @onclick="@(async e => await VolumeDownPress(player))" runat="server">
                <RadzenIcon Icon="volume_down"/>
            </button>
            <button type="submit" name="VolumeUp" title="@lang.WebsiteBVolumeUp" id="VolumeUp" @onclick="@(async e => await VolumeUpPress(player))" runat="server">
                <RadzenIcon Icon="volume_up"/>
            </button>
            <!--<span id="current-time" class="time">0:00</span>
            <input type="range" id="seek-slider" max="100" value="0">
            <span id="duration" class="time">0:00</span>-->
        </div>
    }
    else
    {
        <div class="window" style="max-width: 720px">
            <div class="title-bar">
                <div class="title-bar-text"><RadzenIcon Icon="volume_up" style="top: 50%;transform: translateY(30%);"/> @guild.Members[user.Id].VoiceState.Channel.Name in @guild.Name</div>
                <div class="title-bar-controls">
                    <button aria-label="Close"></button>
                </div>
            </div>
            <div class="window-body">
                <p>
                    Currently playing:
                    <a target="_blank" href="@(player.CurrentTrack is null ? "https://www.youtube.com/watch?v=dQw4w9WgXcQ" : player.CurrentTrack.Uri)">
                        <strong>@(player.CurrentTrack is null ? "Nothing by Noone" : player.CurrentTrack.Title)</strong>
                    </a>
                </p>
                <button type="submit" name="ToggleState" title="Play/Pause" id="ToggleState" @onclick="@(async e => { await ToggleStatePress(player); if (player.State is PlayerState.Paused) { toggleStateText = "play_arrow"; } else if (player.State is PlayerState.Playing) { toggleStateText = "pause";} })" runat="server">
                    <RadzenIcon Icon="@toggleStateText"/>
                </button>
                <button type="submit" name="VoteSkip" title="Vote Skip" id="VoteSkip" @onclick="@(async e => await VoteSkipPress(player))" runat="server">
                    <RadzenIcon Icon="how_to_vote"/>
                </button>
                @if (CheckForDj())
                {
                    <button type="submit" name="ForceSkip" title="Force Skip" id="ForceSkip" @onclick="@(async e => await ForceSkipPress(player))" runat="server">
                        <RadzenIcon Icon="skip_next"/>
                    </button>
                }
                @if (CheckForDj())
                {
                    <button type="submit" name="Shuffle" title="Shuffle" id="Shuffle" @onclick="@(e => ShufflePress(player))" runat="server">
                        <RadzenIcon Icon="shuffle"/>
                    </button>
                }
                <button type="submit" name="NoLoop" title="Cancel Loop" id="NoLoop" @onclick="@(e => NotLoopingPress(player))" runat="server">
                    <RadzenIcon Icon="repeat"/>
                </button>
                <button type="submit" name="LoopSong" title="Loop" id="LoopSong" @onclick="@(e => LoopingSongPress(player))" runat="server">
                    <RadzenIcon Icon="repeat_one"/>
                </button>
                <button type="submit" name="LoopQueue" title="Loop Queue" id="LoopQueue" @onclick="@(e => LoopingQueuePress(player))" runat="server">
                    <RadzenIcon Icon="repeat_on"/>
                </button>
                <button type="submit" name="VolumeDown" title="Volume Down" id="VolumeDown" @onclick="@(async e => await VolumeDownPress(player))" runat="server">
                    <RadzenIcon Icon="volume_down"/>
                </button>
                <button type="submit" name="VolumeUp" title="Volume Up" id="VolumeUp" @onclick="@(async e => await VolumeUpPress(player))" runat="server">
                    <RadzenIcon Icon="volume_up"/>
                </button>
            </div>
        </div>
    }
}
@if (!usenew)
{
    <link rel="stylesheet" href="https://unpkg.com/7.css">
}
else
{
    <style>
  button {
        border-radius: 30%;
        width: 60px;
        height: 60px;
        margin: 0 5px;
    }
    #audio-player-container
    {
        margin: 10px;
        max-width: 670px;
        border-radius: 2%;
        border: 1px solid black;
        background-color: black;
        color: white;
        padding: 5px;
        --rz-icon-size: 2.25rem;
    }
</style>
}